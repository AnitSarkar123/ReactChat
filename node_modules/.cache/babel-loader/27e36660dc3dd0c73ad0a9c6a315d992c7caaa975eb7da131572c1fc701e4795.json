{"ast":null,"code":"var _jsxFileName = \"/Users/nishkarsh/Desktop/ReactChat/src/index.js\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RootComponent = () => {\n  _s();\n  const [isLoading, setIsLoading] = useState(true);\n  useEffect(() => {\n    // Check if it's the initial load or a reload\n    const isReload = sessionStorage.getItem(\"isReloaded\");\n    if (isReload) {\n      // If it's a reload, disable the loader immediately\n      setIsLoading(false);\n    } else {\n      // If it's the initial load, set a flag in sessionStorage and show the loader\n      sessionStorage.setItem(\"isReloaded\", \"true\");\n\n      // Simulate an async operation (e.g., loading data)\n      setTimeout(() => {\n        setIsLoading(false); // Set isLoading to false when done loading\n      }, 2000); // Simulate a 2-second loading time (replace with your actual loading logic)\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(React.StrictMode, {\n    children: isLoading ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Irctc, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(BrowserRouter, {\n      children: [/*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Toaster, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(ToastContainer, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 11\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this);\n};\n_s(RootComponent, \"Yt82d/dvZsn5nYh5sqDQjv+rJ38=\");\n_c = RootComponent;\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\nroot.render( /*#__PURE__*/_jsxDEV(RootComponent, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 49,\n  columnNumber: 13\n}, this));\nvar _c;\n$RefreshReg$(_c, \"RootComponent\");","map":{"version":3,"names":["React","ReactDOM","App","BrowserRouter","jsxDEV","_jsxDEV","RootComponent","_s","isLoading","setIsLoading","useState","useEffect","isReload","sessionStorage","getItem","setItem","setTimeout","StrictMode","children","Irctc","fileName","_jsxFileName","lineNumber","columnNumber","Toaster","ToastContainer","_c","root","createRoot","document","getElementById","render","$RefreshReg$"],"sources":["/Users/nishkarsh/Desktop/ReactChat/src/index.js"],"sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\nimport { BrowserRouter } from \"react-router-dom\";\n\n\nconst RootComponent = () => {\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    // Check if it's the initial load or a reload\n    const isReload = sessionStorage.getItem(\"isReloaded\");\n\n    if (isReload) {\n      // If it's a reload, disable the loader immediately\n      setIsLoading(false);\n    } else {\n      // If it's the initial load, set a flag in sessionStorage and show the loader\n      sessionStorage.setItem(\"isReloaded\", \"true\");\n\n      // Simulate an async operation (e.g., loading data)\n      setTimeout(() => {\n        setIsLoading(false); // Set isLoading to false when done loading\n      }, 2000); // Simulate a 2-second loading time (replace with your actual loading logic)\n    }\n  }, []);\n\n \n  return (\n    <React.StrictMode>\n      {isLoading ? (\n        <div >\n        <Irctc  /> \n        </div>\n      ) : (\n      \n          <BrowserRouter>\n            <App />\n            <Toaster />\n            <ToastContainer />\n          </BrowserRouter>\n      )}\n    </React.StrictMode>\n  );\n};\n\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\nroot.render(<RootComponent />);\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,QAAQ,MAAM,kBAAkB;AACvC,OAAOC,GAAG,MAAM,OAAO;AACvB,OAAO,aAAa;AACpB,SAASC,aAAa,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAGjD,MAAMC,aAAa,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC1B,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGC,QAAQ,CAAC,IAAI,CAAC;EAEhDC,SAAS,CAAC,MAAM;IACd;IACA,MAAMC,QAAQ,GAAGC,cAAc,CAACC,OAAO,CAAC,YAAY,CAAC;IAErD,IAAIF,QAAQ,EAAE;MACZ;MACAH,YAAY,CAAC,KAAK,CAAC;IACrB,CAAC,MAAM;MACL;MACAI,cAAc,CAACE,OAAO,CAAC,YAAY,EAAE,MAAM,CAAC;;MAE5C;MACAC,UAAU,CAAC,MAAM;QACfP,YAAY,CAAC,KAAK,CAAC,CAAC,CAAC;MACvB,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;IACZ;EACF,CAAC,EAAE,EAAE,CAAC;EAGN,oBACEJ,OAAA,CAACL,KAAK,CAACiB,UAAU;IAAAC,QAAA,EACdV,SAAS,gBACRH,OAAA;MAAAa,QAAA,eACAb,OAAA,CAACc,KAAK;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAI;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QACJ,gBAGJlB,OAAA,CAACF,aAAa;MAAAe,QAAA,gBACZb,OAAA,CAACH,GAAG;QAAAkB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAG,eACPlB,OAAA,CAACmB,OAAO;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAG,eACXlB,OAAA,CAACoB,cAAc;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAG;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAEvB;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACgB;AAEvB,CAAC;AAAChB,EAAA,CAtCID,aAAa;AAAAoB,EAAA,GAAbpB,aAAa;AAwCnB,MAAMqB,IAAI,GAAG1B,QAAQ,CAAC2B,UAAU,CAACC,QAAQ,CAACC,cAAc,CAAC,MAAM,CAAC,CAAC;AACjEH,IAAI,CAACI,MAAM,eAAC1B,OAAA,CAACC,aAAa;EAAAc,QAAA,EAAAC,YAAA;EAAAC,UAAA;EAAAC,YAAA;AAAA,QAAG,CAAC;AAAC,IAAAG,EAAA;AAAAM,YAAA,CAAAN,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}